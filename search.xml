<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>校招-计算机基础题库</title>
    <url>/2014/ms_base/</url>
    <content><![CDATA[<p>包括 计算机CS基础/数据结构算法/操作系统/编译原理</p>
<h4 id="计算机网络">计算机网络</h4>
<details>
<summary>
七层协议、TCP&amp;UDP、Get&amp;Post、IPv4&amp;IPv6
</summary>
<h5 id="osi-的七层协议">OSI 的七层协议</h5>
<p>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<h5 id="baset-表示什么">100baseT 表示什么？</h5>
<p>100 表示传送速度是 100Mbit/s，Base
表示是基带传送，传送数字信号，与宽带传送对应。T 表示传输介质是双绞线，F
表示光纤</p>
<h5 id="hubswitchrooter-位于那一层">hub、switch、rooter
位于那一层？</h5>
<p>冲突域：同一物理网段上所有节点的集合。<br />
广播域：接收同样广播消息的节点的集合。<br />
物理层的主要设备：中继器、集线器（hub）。不能隔离广播域和冲突域<br />
数据链路层主要设备：网桥、交换机（switch）。能隔离冲突域，不能隔离广播域</p>
<p>网络层主要设备：路由器（rooter）。能隔离冲突域和广播域</p>
<h5 id="get-和-post-区别">Get 和 Post 区别</h5>
<p>Get 是不安全的，因为在传输过程，数据被放在请求的 URL 中；Post
的所有操作对用户来说都是不可见的。 Get 传送的数据量较小，这主要是因为受
URL 长度限制；Post 传送的数据量较大，一般被默认为不受限制。 Get 限制
Form 表单的数据集的值必须为 ASCII 字符；而 Post 支持整个 ISO10646
字符集。 Get 执行效率却比 Post 方法好。Get 是 form 提交的默认方法。 GET
产生一个 TCP 数据包；POST 产生两个 TCP
数据包。（非必然，客户端可灵活决定）</p>
<h5 id="http-请求的完全过程">Http 请求的完全过程</h5>
<p>浏览器根据域名解析 IP 地址（DNS），并查 DNS 缓存 浏览器与 WEB
服务器建立一个 TCP 连接 浏览器给 WEB 服务器发送一个 HTTP
请求（GET/POST）：一个 HTTP 请求报文由请求行（request
line）、请求头部（headers）、空行（blank line）和请求数据（request
body）4 个部分组成。 服务端响应 HTTP 响应报文，报文由状态行（status
line）、相应头部（headers）、空行（blank line）和响应数据（response
body）4 个部分组成。 浏览器解析渲染</p>
<h5 id="http-1.01.12.0-之间的差异">HTTP 1.0，1.1，2.0 之间的差异</h5>
<p><strong>从1.0 到 1.1</strong>
缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity
tag，If-Unmodified-Since, If-Match,
If-None-Match等更多可供选择的缓存头来控制缓存策略。</p>
<p>带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial
Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>
<p>错误通知的管理，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>
<p>Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed
Web
Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400
Bad Request）。</p>
<p>长连接，HTTP
1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection：
keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p>
<p>降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL
blocking的问题，降低了延迟同时提高了带宽的利用率。</p>
<p>请求优先级（request
prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p>
<p>header压缩。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</p>
<p>基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。</p>
<p>服务端推送（server
push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</p>
<p><strong>Http 2.0</strong></p>
<p>新的二进制格式（Binary
Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p>
<p>多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的
id将request再归属到各自不同的服务端请求里面。</p>
<p>header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header
fields表，既避免了重复header的传输，又减小了需要传输的大小。</p>
<p>服务端推送（server push），同SPDY一样，HTTP2.0也具有server
push功能。</p>
<p>tcp 和 udp 区别 TCP 面向连接，UDP
是无连接的，即发送数据之前不需要建立连接。 TCP
提供可靠的服务。也就是说，通过 TCP
连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP
尽最大努力交付，即不保证可靠交付。 TCP 面向字节流，实际上是 TCP
把数据看成一连串无结构的字节流，UDP 是面向报文的，UDP
没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如
IP 电话，实时视频会议等） 每一条 TCP 连接只能是点到点的，UDP
支持一对一，一对多，多对一和多对多的交互通信。 TCP 首部开销 20 字节，UDP
的首部开销小，只有 8 个字节。 TCP 的逻辑通信信道是全双工的可靠信道，UDP
则是不可靠信道。 tcp 和 udp 的优缺点</p>
<p>TCP TCP 的优点：可靠，稳定。TCP 的可靠体现在 TCP
在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。
TCP 的缺点：慢，效率低，占用系统资源高，易被攻击。TCP
在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的
CPU、内存等硬件资源。 而且，因为 TCP
有确认机制、三次握手机制，这些也导致 TCP
容易被人利用，容易遭受攻击。</p>
<p>UDP UDP 的优点：快，比 TCP 稍安全。UDP 没有 TCP
的握手、确认、窗口、重传、拥塞控制等机制，UDP
是一个无状态的传输协议，所以它在传递数据时非常快。没有 TCP
的这些机制，UDP 较 TCP 被攻击者利用的漏洞就要少一些。但 UDP
也是无法避免攻击的。 UDP 的缺点：不可靠，不稳定。因为 UDP 没有 TCP
那些可靠的机制，在数据传递时，如果网络质量不好，就会很容易丢包。</p>
<p>总结 当对数据准确性要求高的时候，应该使用 TCP，比如 HTTP、HTTPS、FTP
等传输文件的协议，POP、SMTP 等邮件传输的协议。
当对数据准确性要求不高，同时要求网络通讯速度能尽量的快的时候，这时就可以使用
UDP。比如 QQ 语音、QQ 视频。</p>
<h4 id="cookie-和-session的区别理解">Cookie 和 Session的区别理解</h4>
<p>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.</p>
<p>session 在服务器端，cookie 在客户端（浏览器） session
默认被存在在服务器的一个文件里（不是内存） session 的运行依赖 session
id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie
，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递
session_id） session 可以放在 文件、数据库、或内存中都可以。
用户验证这种场合一般会用 session</p>
Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；
Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。
</details>
<details>
<summary>
IPv4&amp;IPv6、三次握手、外网内网
</summary>
</details>
<h4 id="计算机操作系统">计算机操作系统</h4>
<details>
<summary>
输入1992 返回2991 的整数翻转
</summary>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">          result = result * <span class="number">10</span> + x%<span class="number">10</span>;</span><br><span class="line">          <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          x = x/<span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">int</span>) result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
  </entry>
  <entry>
    <title>校招-前端知识题库</title>
    <url>/2014/ms_fe/</url>
    <content><![CDATA[<p>包括 fe/js/TS/React/H5/微信小程序</p>
<p><img src="/images/home_center_small.jpg" alt="home" width="600"/></p>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
  </entry>
  <entry>
    <title>HelloWorld</title>
    <url>/2014/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-star">Quick Star</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>single</category>
      </categories>
  </entry>
  <entry>
    <title>Category 特性在组件化中的应用于管控</title>
    <url>/2018/mtblog_category_ios/</url>
    <content><![CDATA[<p>默认文案
https://tech.meituan.com/2018/11/08/ios-category-module-communicate.html</p>
]]></content>
      <categories>
        <category>MTBlog</category>
      </categories>
  </entry>
  <entry>
    <title>校招-客户端知识题库</title>
    <url>/2014/ms_client/</url>
    <content><![CDATA[<p>包括 Android/iOS/RN/Flutter 默认文案</p>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
  </entry>
  <entry>
    <title>纯 Dart 语言 Flutter 动态化实践</title>
    <url>/2020/mtblog_flap/</url>
    <content><![CDATA[<p>默认文案
https://tech.meituan.com/2020/06/23/meituan-flutter-flap.html</p>
]]></content>
      <categories>
        <category>MTBlog</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown 高阶语法验证</title>
    <url>/2015/website_md_style/</url>
    <content><![CDATA[<p>本文作为存档备份，每次切换转义框架或主题时，以此文档验证该环境下markdown各语法是否支持以及样式是否美观。</p>
<h2 id="quick-start">Quick Start</h2>
<h2 id="化学公式">化学公式</h2>
<h3 id="化学方程式表示">化学方程式表示</h3>
<h2 id="数学公式">数学公式</h2>
<h3 id="基本字符">基本字符</h3>
<h3 id="多行多项式">多行多项式</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>“$” 表示行内公式：</p>
<p>质能守恒方程可以用一个很简洁的方程式 <span class="math inline">\(\
E=mc^2\)</span> 来表达。 <code>$\ E=mc^2$</code></p>
<p>求和公式 <span class="math inline">\(\sum_{i=0}^n i^2 =
\frac{(n^2+n)(2n+1)}{6}\)</span>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$\sum_&#123;i=<span class="number">0</span>&#125;^n i^<span class="number">2</span> = \frac&#123;(n^<span class="number">2</span>+n)(<span class="number">2n</span>+<span class="number">1</span>)&#125;&#123;<span class="number">6</span>&#125;$<span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>复杂一点的公式 <span class="math inline">\(J_\alpha(x) =
\sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({
\frac{x}{2} }\right)}^{2m + \alpha}\)</span> 后方可添加注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$J_\<span class="title function_">alpha</span>(x) = \sum_&#123;m=<span class="number">0</span>&#125;^\infty \frac&#123;(-<span class="number">1</span>)^m&#125;&#123;m! \<span class="title class_">Gamma</span> (m + \alpha + <span class="number">1</span>)&#125; &#123;\<span class="title function_">left</span>(&#123; \frac&#123;x&#125;&#123;<span class="number">2</span>&#125; &#125;\right)&#125;^&#123;2m + \alpha&#125;$</span><br></pre></td></tr></table></figure>
<p>单行长函数 <span
class="math inline">\(f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) =
x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm cdots} + x_n^2\)</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$f(x_1,x_2,\underbrace&#123;\ldots&#125;_&#123;\rm ldots&#125; ,x_n) = x_1^<span class="number">2</span> + x_2^<span class="number">2</span> + \underbrace&#123;\cdots&#125;_&#123;\rm cdots&#125; + x_n^<span class="number">2</span>$</span><br></pre></td></tr></table></figure>
<p>“$$” 表示整行公式：</p>
<p>取极限 <span class="math display">\[
\lim_{n \to +\infty} \frac{1}{n(n+1)} \quad or \quad
\lim_{x\leftarrow{sample}} \frac{1}{n^2+1}
\]</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\lim_&#123;n \to +\infty&#125; \frac&#123;<span class="number">1</span>&#125;&#123;<span class="title function_">n</span>(n+<span class="number">1</span>)&#125; \quad or \quad \lim_&#123;x\leftarrow&#123;sample&#125;&#125; \frac&#123;<span class="number">1</span>&#125;&#123;n^<span class="number">2</span>+<span class="number">1</span>&#125; </span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>矩阵与省略号 <span class="math display">\[
        x =
        \begin{pmatrix}
        1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\
        1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\
        \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
        1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \\
        \end{pmatrix}
\]</span> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">        <span class="title function_">f</span>(m,n)=</span><br><span class="line">        \begin&#123;pmatrix&#125;</span><br><span class="line">        <span class="number">1</span> &amp; a_1 &amp; a_1^<span class="number">2</span> &amp; \cdots &amp; a_1^n \\</span><br><span class="line">        <span class="number">1</span> &amp; a_2 &amp; a_2^<span class="number">2</span> &amp; \cdots &amp; a_2^n \\</span><br><span class="line">        \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\</span><br><span class="line">        <span class="number">1</span> &amp; a_m &amp; a_m^<span class="number">2</span> &amp; \cdots &amp; a_m^n \\</span><br><span class="line">        \end&#123;pmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p>
<p>多重积分符号 <span class="math display">\[
\begin{array}{cc}
\mathrm{Bad} &amp; \mathrm{Better} \\
\hline \\
\int\int_S f(x)\,dy\,dx &amp; \iint_S f(x)\,dy\,dx \\
\int\int\int_V f(x)\,dz\,dy\,dx &amp; \iiint_V f(x)\,dz\,dy\,dx
\end{array}
\]</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;cc&#125;</span><br><span class="line">\mathrm&#123;Bad&#125; &amp; \mathrm&#123;Better&#125; \\</span><br><span class="line">\hline \\</span><br><span class="line">\int\int_S f(x)\,dy\,dx &amp; \iint_S f(x)\,dy\,dx \\</span><br><span class="line">\int\int\int_V f(x)\,dz\,dy\,dx &amp; \iiint_V f(x)\,dz\,dy\,dx</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>有些符号会产生不合适的间隔，需要手动添加间隔符</p>
<p><span class="math display">\[
\begin{array}{cc}
\mathrm{Bad} &amp; \mathrm{Better} \\
\hline \\
\{x|x^2\in\Bbb Z\} &amp; \{x\mid x^2\in\Bbb Z\} \\
\end{array}
\]</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;cc&#125;</span><br><span class="line">\mathrm&#123;Bad&#125; &amp; \mathrm&#123;Better&#125; \\</span><br><span class="line">\hline \\</span><br><span class="line">\&#123;x|x^2\in\Bbb Z\&#125; &amp; \&#123;x\mid x^2\in\Bbb Z\&#125; \\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>箭头指向 <span class="math display">\[
\begin{CD}
    A @&gt;&gt;&gt; B @&gt;{\text{very long label}}&gt;&gt; C \\
    @. @AAA @| \\
    D @= E @&lt;&lt;&lt; F
\end{CD}
\]</span> <span class="math display">\[
\begin{CD}
    A @&gt;a&gt;&gt; B\\
    @V b V V\# @VV c V\\
    C @&gt;&gt;d&gt; D
\end{CD}
\]</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">    A @&gt;&gt;&gt; B @&gt;&#123;\text&#123;very long label&#125;&#125;&gt;&gt; C \\</span><br><span class="line">    @. @AAA @| \\</span><br><span class="line">    D @= E @&lt;&lt;&lt; F</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br><span class="line">$$</span><br><span class="line">\begin&#123;CD&#125;</span><br><span class="line">    A @&gt;a&gt;&gt; B\\</span><br><span class="line">    @V b V V\# @VV c V\\</span><br><span class="line">    C @&gt;&gt;d&gt; D</span><br><span class="line">\end&#123;CD&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>啊啊</p>
<p>底部分割</p>
<details>
<summary>
折叠文本
</summary>
<code>hexo</code>是什么？ #### 啊啊啊啊啊eeee鹅鹅鹅饿
</details>
<h2 id="问答">问答</h2>
<details>
<summary>
什么是tinper
</summary>
<p><code>tinper</code>是开源前端技术平台。<br> 鹅鹅鹅饿 #####
啊啊啊啊啊eeee鹅鹅鹅饿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
  </entry>
  <entry>
    <title>技术栈无关的剧本式引导</title>
    <url>/2022/mtblog_asg/</url>
    <content><![CDATA[<p>默认文案
https://tech.meituan.com/2022/04/07/waimai-application-scripted-guidance.html</p>
]]></content>
      <categories>
        <category>MTBlog</category>
      </categories>
  </entry>
  <entry>
    <title>美团外卖多端复用与架构演进</title>
    <url>/2018/mtblog_multi_reuse/</url>
    <content><![CDATA[<p>默认文案
https://tech.meituan.com/2018/06/29/ios-multiterminal-reuse.html</p>
]]></content>
      <categories>
        <category>MTBlog</category>
      </categories>
  </entry>
  <entry>
    <title>网站建设与部署问题记录</title>
    <url>/2015/website_qa/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>本文档旨在记录个人站点建设过程中遭遇的挑战及其解决方案，着重概述主要架构和操作流程，而非详尽地逐步说明具体操作细节。</p>
<h3 id="网站基础">网站基础</h3>
<h4 id="第三方域名">第三方域名</h4>
<p>关于快速建设一个可托管的个人网站目前业界有一些流行方案可选</p>
<ol type="1">
<li>GitHub Pages: GitHub
提供的一项服务，允许用户免费托管静态网站。它特别适合个人、项目或组织的博客、项目文档和个人简历等网站。</li>
<li>Netlify: 提供免费的静态网站托管服务，支持自动从 Git
仓库部署，并提供自定义域名、HTTPS、全球 CDN 等功能。</li>
<li>Vercel: 类似于 Netlify，Vercel 也提供从 Git
仓库自动部署的静态网站托管服务，支持 Serverless 函数和全球 CDN。</li>
<li>GitLab Pages: 类似于 GitHub Pages，GitLab Pages 允许你使用 GitLab
仓库托管静态网站，并提供自定义域名和HTTPS支持。</li>
<li>Firebase Hosting: Google 提供的托管解决方案，适合托管静态内容，如
HTML、CSS、JavaScript 和图片，支持自定义域名和HTTPS。</li>
<li>Cloudflare Pages:
提供静态网站托管服务，免费提供无限次的网站构建，支持自定义域名和HTTPS。</li>
<li>Amazon S3 + Amazon CloudFront: 使用 Amazon S3
存储静态网站内容，并通过 Amazon CloudFront 提供 CDN
服务。需要配置，可能涉及费用。</li>
</ol>
<p>因 Github Pages 操作相对简单，以此方案推进。 操作方式为以固定格式
<sup>仓库名称：xxx.github.io</sup> 创建一个仓库，并上传 index.html
文件。 之后可通过该域名访问可看到一个静态网页。</p>
<h4 id="个人域名dns解析">个人域名dns解析</h4>
<p>当已经获得了 <code>yourname.github.io</code> 这样一个 Github Pages
网页后，觉得这个网址不够 cool，需要有一个自己的个人域名
<code>www.yourname.com</code> 此时需要用到域名解析服务。</p>
<p>目前国内推荐的云服务平台是 阿里云 或 腾讯云 ，这里以腾讯云举例 <a
href="https://dnspod.cloud.tencent.com/">腾讯云域名购买页</a> 一般 .com
.cn .net 等可选，价格为几百元/年。 付款后可以去 <a
href="https://console.cloud.tencent.com/domain">腾讯云控制台入口</a>、<a
href="https://console.cloud.tencent.com/cns">腾讯云 dns 控制台</a>
进行对应的操作与配置。</p>
<p>同时，因为购买的域名需要重定向到源域名，源域名一般会对随意的重定向有限制，因此需要再
Github Pages 里的设置里 custome domain 填写购买与注册的新域名。</p>
<h4 id="接入cdn">接入cdn</h4>
<p>计算机专业的都知道 cdn
是就近节点缓存了资源文件，使得重复访问速度可以更快。
这个服务在腾讯云里也可以付费购买。 <a
href="https://console.cloud.tencent.com/cdn">腾讯云 cdn 控制台</a>
这里需要判断是境内加速还是境外加速，Github Pages 属于境外。
在大多数网络环境 Github
域名是可以访问的，若需要域名能在境内高速访问需要备案并购买境内云主机用于部署。</p>
<p>当源网站内容进行更新后，会在一定延迟内同步到 cdn
，若需要立刻生效则使用 cdn 中的 url 刷新功能。与之平级的还有 url
预热，预热的区别是提前在各节点缓存该域名的资源文件，使得用户的第一次访问也可以加速，默认的
cdn 是首次访问后第二次开始才能加速。</p>
<h4 id="接入https">接入https</h4>
<h5
id="问题地址栏提示感叹号或不安全">问题：地址栏提示感叹号或不安全</h5>
<p>浏览器的地址栏里填写个人域名的网址，该网址前面可能会出现一个
感叹号，或标红此网站不安全，这就是此网站没有接入 https。</p>
<p>这时需要购买 SSL证书 <a
href="https://console.cloud.tencent.com/ssl">腾讯云 ssl
控制台</a>，也可以选择免费的，免费局限性在于时效较短需要频繁更新，并且安全级别较低真出现了信息隐患平台也不承担责任。</p>
<h5 id="问题网页错误响应码-514">问题：网页错误响应码 514</h5>
<p>需要确认 cdn 域名管理/HTTPS配置/HTTPS服务 是勾选的。 这里是请求量
300万次内免费，超过付费。 若不勾选则不会产生费用，但会报 514
错误，一般可能是欠费导致此处关闭了，但其他某链路却设置了 HTTPS。</p>
<h5 id="问题报错-err_too_many_redirects">问题：报错
ERR_TOO_MANY_REDIRECTS</h5>
<p>这个报错看上去很像是个人域名与源域名有循环跳转的情况。所以需要确认
dns 中的 @ CNAME 指向了 cdn 的域名。 并且 cdn
域名管理/基础设置/回源地址是源地址，回源 Host 是新域名。</p>
<p>同时也需要确认 是否均开启了 HTTPS，因为有的重定向规则 HTTP
重定向到HTTPS，同时又将 HTTPS 重定向回 HTTP。 所以需要确认 Github Pages
设置里勾选了 <code>Enforce HTTPS</code> ，cdn
域名管理/基础设置/回源协议是 HTTPS。</p>
<h3 id="网站样式">网站样式</h3>
<p>考虑到博客与文档会使用更适合文档编写的 md 格式，所以需要一个能够将 md
格式文档转换成 html 产物的站点生成器。</p>
<h4 id="站点生成器">站点生成器</h4>
<ol type="1">
<li>Hexo: 简单且强大的基于 Node.js
的静态站点生成器，特别适合用于个人博客的构建。支持 md 文件转换为
HTML，并且拥有丰富的插件系统和主题生态。</li>
<li>Jekyll: Ruby 编写的静态站点生成器，与 GitHub Pages
集成非常紧密，支持 md 和 Liquid 模板。</li>
<li>Hugo: 使用 Go 语言编写的静态站点生成器，以其构建速度快而闻名，支持
md 和自定义模板。</li>
<li>Gatsby: 基于 React 的现代静态网站生成器，使用 GraphQL 管理数据，支持
md。</li>
<li>VuePress: 由 Vue.js 驱动的静态站点生成器，专为技术文档而设计，支持
md。</li>
</ol>
<p>考虑到使用方便以及行业生态，这里使用 Hexo 来作为方案推进。
在一个空文件夹使用 <code>Hexo init</code> 指令来开启项目。
接下来将会经常频繁的用到如下指令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  # 清除生成的 html 产物</span><br><span class="line">hexo generate # 重新生成</span><br><span class="line">hexo server # 本地预览</span><br><span class="line">hexo deploy # 远端发布</span><br></pre></td></tr></table></figure> 使用 generate
指令后会产生 .deploy_git 文件，可在此文件目录修改 git config 等信息避免
commit 上 author 错误。</p>
<h4 id="网站主题选择">网站主题选择</h4>
<p>Hexo 官方提供了非常友好的主题展示与预览 <a
href="https://hexo.io/themes/">HexoThemes</a>。看上了哪个基本都可以使用如下指令安装，考虑后选用
Next 主题。 该主题的优势为兼容性好，界面风格简单不花哨。
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure></p>
<p>Hexo 有一个配置文件 根目录 / _config.yml 文件
<sup>用于站点基础类信息配置</sup> 下载了 Next 主题后，主题的配置文件在
根目录 / themes / next / _config.yml 文件
<sup>用于站点主题样式类配置</sup> 例如：想修改站点名称
应是前一个，想修改代码块高亮的方式 应是后一个。</p>
<p>Next 的配置文件中的配置项是 Next
定义的，配置项随着版本更新也会有变化，若出现一些属性设置不生效时，可以使用自定义
css 样式。 自定义 css 样式一般创建在 根目录 / source / css / _custom /
custom.styl 。</p>
<p>通过 Hexo 配置文件中的配置 <sup>如下</sup> 将 Hexo 和 Next 关联</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>通过 Next 配置文件中的配置 <sup>如下</sup> 将 Next
主题与自定义样式关联</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">source/css/_custom/custom.styl</span></span><br></pre></td></tr></table></figure>
<h4 id="主题内对应设置">主题内对应设置</h4>
<p>一般来说样式都可以在配置文件与 custome.styl
文件中找到答案，在网站中的 icon 可以在 <a
href="https://fonts.google.com/icons">google icon 大全</a> 、<a
href="https://fontawesome.com/v5/search?o=r&amp;m=free">fontawesome icon
大全</a> 寻找。 对于字体的配置可以在 <a
href="https://fonts.google.com/">google 字体大全</a> 里寻找。</p>
<h5 id="问题设置自定义首页">问题：设置自定义首页</h5>
<p>这个问题也可以理解为域名直接访问的首页，并不是我在 / home /
下定义的首页。 因为 Hexo
的首页默认生成一些文章列表摆在这，这让你的首页一进入是并不清爽。</p>
<p>解决的办法是：先将 / home / 下的自定义首页移到 source
的根目录，然后通过 Hexo 的配置文件禁用自动生成，这样本身根目录下的
index.md 生成的html 就不会被冲掉了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27; &#x27;</span>  <span class="comment"># 中间有个空的空格</span></span><br></pre></td></tr></table></figure>
<p>同时 Next 配置文件的 home 也指向根目录，这样即可做到
<strong>通过域名访问的首页，和点击 home
按钮返回的首页是一个页面</strong>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-igloo</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user-graduate</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tag</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th-list</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">/sitemap.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-sitemap</span></span><br></pre></td></tr></table></figure>
<h5
id="问题设置中文与英文为不同的字体样式">问题：设置中文与英文为不同的字体样式</h5>
<h3 id="数学公式渲染">数学公式渲染</h3>
<p>文章是使用 md 格式的，md
可以通过渲染器实现数学公式这样非常「书面」的显示，类似这样的效果：</p>
<p><span class="math display">\[
J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha +
1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha}
\]</span></p>
<p>这里需要先编写并生成中间产物，然后再将中间产物渲染出来。</p>
<h4 id="数学语法编写">数学语法编写</h4>
<p>需要安装处理数学公式的插件，这一步动作的目的是 md
中使用的数学公式语法在 <code>hexo generate</code> 时会生成对应的 html
标签。</p>
<p>在终端执行 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure> 修改 hexo 根目录 <code>_config.yml</code>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">&#x27;mathjax&#x27;</span> <span class="comment"># 或者 &#x27;katex&#x27;，取决于你想使用哪个渲染器</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># MathJax 配置项</span></span><br></pre></td></tr></table></figure> 然后就是 md 中的编写了，具体语法可参考 [链接] ，不同语法在
hexo 主题中的显示效果可见我的另一篇博文 [链接]。</p>
<h4 id="渲染器">渲染器</h4>
<p>当你在本地使用 Hexo 生成站点时，你可以使用 Pandoc 作为 md
渲染器，但是最终生成的静态 HTML
文件应该包含了渲染后的数学公式代码。如果你希望在本地使用 Pandoc
来渲染数学公式，你需要在本地环境中安装 Pandoc</p>
<p>下载 <code>hexo-renderer-pandoc</code> 插件前也先要让电脑里安装了
pandoc <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install pandoc</span><br><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></p>
<p>GitHub Pages 并不支持服务器端的渲染器，如 Pandoc。因此你不能直接控制
GitHub Pages 使用 Pandoc 来渲染你的数学公式。GitHub Pages
只能托管静态内容，所以你需要在本地生成所有静态文件，然后上传到
GitHub。</p>
<p>即使是使用 Pandoc 渲染的数学公式，最终在 GitHub Pages
上的显示也依赖于客户端的 JavaScript 库 <sup>如 MathJax 或 KaTeX</sup>
来正确显示数学公式。</p>
<p>将生成的 html 标签渲染成对应数学公式，需要使用渲染器插件，在 Next
主题的官方文档中就提到 katex 可能有未知问题，建议使用 pandoc。</p>
<p>修改 hexo 根目录 <code>_config.yml</code> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pandoc:</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pandoc-citeproc</span></span><br><span class="line">  <span class="attr">extra:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--mathjax</span></span><br><span class="line">  <span class="attr">meta:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">my-meta-data</span></span><br></pre></td></tr></table></figure> 修改 Next 的
<code>_config.yml</code> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
这样可以做到渲染器在本地生效，并且在远端网页也生效。</p>
<h3 id="站内搜索">站内搜索</h3>
<h4 id="algolia注册">Algolia注册</h4>
<p>在 https://www.algolia.com/ 官网点击右上角的注册，可直接使用
<code>google</code> 账号或 <code>github</code>
账号一键关联登入，登入后在 https://dashboard.algolia.com/ 控制台查看。
在控制台内需要创建一个 indexname
作为一个标识，之后在本地配置时会用到，其他的配置可以都忽略。免费账户总共有
10,000 条记录，每月有 100,000 的可以操作数。</p>
<h4 id="algolia接入">Algolia接入</h4>
<p>在终端使用如下指令拉取 hexo 插件依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure>
<p>可以通过如下指令查看已安装的插件版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm list --depth=0 | grep hexo-algolia</span><br></pre></td></tr></table></figure>
<h4 id="基础搜索功能">基础搜索功能</h4>
<p>例如我使用 hexo 的 Next 主题，需在 themes/next/_config.yml
文件中增加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 主要也就是把这里从 false 改为 true</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span></span><br><span class="line">    <span class="attr">hits_stats:</span> <span class="string">&quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span></span><br></pre></td></tr></table></figure>
<p>并在 hexo 根目录的 _config.yml 中增加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">&#x27;你的ApplicationID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;你的AdminAPIKey&#x27;</span> </span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;你的IndexName&#x27;</span></span><br></pre></td></tr></table></figure>
<p>并在本机器的 <code>~/.zshrc</code> 中增加下面一行环境变量，并执行
<code>source ~/.zshrc</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="variable constant_">HEXO_ALGOLIA_INDEXING_KEY</span>=<span class="string">&#x27;你的AdminAPIKey&#x27;</span></span><br></pre></td></tr></table></figure>
<p>若填写不正确，会看到如下报错 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">ERROR</span> [hexo-algolia] <span class="title class_">Please</span> provide an <span class="title class_">Algolia</span> index name <span class="keyword">in</span> your hexo _config.yml file.</span><br><span class="line"><span class="variable constant_">ERROR</span> &gt;&gt; <span class="title class_">Read</span> <span class="symbol">https:</span>/<span class="regexp">/npmjs.com/hexo</span>-algolia<span class="comment">#public-facing-search-options for more informations.</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">ERROR</span> [hexo-algolia] <span class="title class_">Please</span> set an <span class="string">`HEXO_ALGOLIA_INDEXING_KEY`</span> environment variable to enable content indexing.</span><br><span class="line"><span class="variable constant_">ERROR</span> &gt;&gt; <span class="title class_">Read</span> <span class="symbol">https:</span>/<span class="regexp">/npmjs.com/hexo</span>-algolia<span class="comment">#api-key for more informations.</span></span><br></pre></td></tr></table></figure></p>
<p>配置完毕后再终端需要一键四连了，或弄个脚本简化 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo algolia</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure> 其中
<code>hexo algolia</code> 指令是需要在 <code>hexo generate</code>
之后执行的，因前者生成了 html 文件，后者是从这里提取所需索引字段并对
indexname 和 appid 去上传。执行后在 Algolia 的控制台内可看到上传的信息。
一般来说每次文章内容更新后都应当使用此指令更新索引。</p>
<h4 id="支持content搜索">支持content搜索</h4>
<p>使用上述方式配置之后，网站内可以基于 title 搜索了，但这是不够的。
期望的状态是：<strong>每篇文章的内容也可以搜索，输入了内容的关键字也可以搜到对应的文章标题</strong></p>
<p>按照官方文档的介绍是在 hexo 跟目录下的 <code>_config.yml</code>
文件中增加如下配置，其中<code>content</code>为内容部分</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="string">&#x27;你的ApplicationID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;你的AdminAPIKey&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;你的IndexName&#x27;</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">title</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">content</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">date</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">categories</span></span><br></pre></td></tr></table></figure>
<p><code>title</code>、<code>tags</code> 等字段基于 md 文章的 header
部分提取。 <code>content</code> 字段 Hexo Algolia
插件在索引时会查找并提取这个 <code>articleBody</code>
区域的内容。并不需要添加任何特殊的 content 标记，插件会自动处理这部分。
默认情况下文章的内容被放置在具有 <code>post-body</code> 类的
<code>div</code> 标签内，并且使用了 <code>itemprop="articleBody"</code>
属性。这是 Hexo 生成的 HTML 结构。</p>
<p>但我配置后并没有生效，在 Algolia 的控制台内接收到的索引 item
信息里别的都有就是没有 <code>content</code> 。经过验证是
<code>_config.yml</code> 中的 <code>fields</code>
属性并没有生效，所以想增加 <code>content</code>
的诉求还是被忽略了，经过一番换写法的尝试该属性还是不生效。</p>
<h5 id="问题config-文件-algolia-fields-不生效">问题：config 文件 algolia
fields 不生效</h5>
<p>解决方案是修改源码。通过 <code>npm install --save hexo-algolia</code>
下载插件一版都位于hexo根目录下的 <code>node_modules</code>
文件夹内，原逻辑是源码中设置了默认的索引上传字段，然后基于配置文件可以修改这些上传字段，在
<code>hexo-alogia/lib/command.js</code> 的变量位置增加了
<code>content</code> 字段后 It works。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CONSOLE_DEFAULTS</span> = &#123;</span><br><span class="line">  <span class="attr">dryRun</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">flush</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">chunkSize</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">layouts</span>: <span class="variable constant_">INDEXED_LAYOUTS</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">INDEXED_PROPERTIES</span> = [</span><br><span class="line">  <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;content&#x27;</span>, <span class="comment">//这里是新增的</span></span><br><span class="line">  <span class="string">&#x27;date&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;updated&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;excerpt&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;permalink&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;layout&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;image&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>虽然 It works 但终端仍然有报错信息</p>
<h5
id="问题hexo-algolia-error-objectid-is-too-big-size">问题：[hexo-algolia]
ERROR objectID is too big size</h5>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">ERROR</span> [hexo-algolia] <span class="title class_">Record</span> at the position <span class="number">2</span> objectID=xx is too big size=<span class="number">10677</span>/<span class="number">10000</span> bytes. </span><br><span class="line"><span class="title class_">Please</span> have a look at <span class="symbol">https:</span>/<span class="regexp">/www.algolia.com/doc</span><span class="regexp">/guides/sending</span>-<span class="keyword">and</span>-managing-data/prepare-your-data/<span class="keyword">in</span>-depth/index-<span class="keyword">and</span>-records-size-<span class="keyword">and</span>-usage-limitations/<span class="comment">#record-size-limits</span></span><br></pre></td></tr></table></figure>
<p>我这篇文章其实并不长，但居然报了说 too big，因为我们是使用 hexo
框架对一个 md 文件去生成的 html 文件，这里有大量的 <标签>
充斥在正文内，很快会把 10KB 撑满，<strong>至此也终于理解了为什么
hexo-algolia 的作者会在默认值中不带上 content
了，因为一带上大部分用户都会遇到 too big 报错，所以干脆去掉了
content</strong>。</p>
<p>对于这个问题的解决办法是 在插件内拼接好<code>content</code>准备向
Algolia 发请求时，将这里的大量标签信息过滤一下。 目标是
<strong>只保留汉字信息与英文单词信息，过滤掉&lt;&gt;标签信息以及一些常见的标签英文单词</strong>
代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extractText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// 移除 HTML 标签</span></span><br><span class="line">  text = text.<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]*&gt;/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 定义要移除的 HTML 标签单词列表</span></span><br><span class="line">  <span class="keyword">const</span> removeWords = [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;style&#x27;</span>];</span><br><span class="line">  <span class="comment">// 构建移除这些单词的正则表达式</span></span><br><span class="line">  <span class="keyword">const</span> removeWordsRegex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\b(&#x27;</span> + removeWords.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) + <span class="string">&#x27;)\\b&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>);</span><br><span class="line">  <span class="comment">// 移除常见的 HTML 标签单词</span></span><br><span class="line">  text = text.<span class="title function_">replace</span>(removeWordsRegex, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 匹配中文字符和英文单词的正则表达式</span></span><br><span class="line">  <span class="keyword">const</span> extractRegex = <span class="regexp">/[\u4e00-\u9fa5a-zA-Z]+/g</span>;</span><br><span class="line">  <span class="comment">// 提取中文字符和英文单词，并连接成一个字符串</span></span><br><span class="line">  <span class="keyword">const</span> extractedText = (text.<span class="title function_">match</span>(extractRegex) || []).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> extractedText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将这个正则过滤的代码放到对应位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">publishedPagesAndPosts</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> publishedPagesAndPosts.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> storedPost = <span class="title function_">pick</span>(data, <span class="variable constant_">INDEXED_PROPERTIES</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在上传之前过滤 content 字段</span></span><br><span class="line">    <span class="keyword">if</span> (storedPost.<span class="property">content</span>) &#123;</span><br><span class="line">      storedPost.<span class="property">content</span> = <span class="title function_">extractText</span>(storedPost.<span class="property">content</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> storedPost;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>至此，再次在终端内使用<code>hexo algolia</code>指令时就不会报错 too
big 了，在 Algolia 的控制台内看上传 item 内的 <code>content</code>
字段也非常紧凑了。
当然，修改源码的方式在重新拉依赖后会被冲掉，心里有数就行。</p>
]]></content>
      <categories>
        <category>Website</category>
      </categories>
  </entry>
</search>
